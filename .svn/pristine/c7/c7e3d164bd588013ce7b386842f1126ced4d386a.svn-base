import {Component, OnInit, Inject, OnDestroy} from '@angular/core';
import {FormGroup, FormControl, Validators} from '@angular/forms';

import {TranslateService} from '@ngx-translate/core';

import {DataStorageService} from '../../shared/data-storage.service';
import {LoginService} from './login.service';
import {IAppConstants} from '../../app-constants.interface';
import {APP_CONSTANTS} from '../../app-constants';
import { UtilsButtonService } from '../../core/utils-button/utils-button.service';
import { DesbloquearUsuarioService } from '../desbloquear-usuario/desbloquear-usuario.service';
import { RecuperarContrasenyaService } from '../recuperar-contrasenya/recuperar-contrasenya.service';
import { Subscription } from 'rxjs/Subscription';
import {Observable} from 'rxjs/Observable';
import { componentFactoryName } from '@angular/compiler';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html'
})
export class LoginComponent  implements OnInit, OnDestroy {

  loginForm: FormGroup;
  showPassword: boolean = false;
  isServidorRest: boolean = false;
  submited$: Observable<boolean>;
  errorMessageDescripcion: string = '';
  private subscriptionRestServer: Subscription;
  private subscriptionLogin: Subscription;
  private subscriptionRecuperarContrasenya: Subscription;
  private subscriptionDesbloquearUsuario: Subscription;

    constructor(private translate: TranslateService,
    @Inject(APP_CONSTANTS) private constants: IAppConstants,
    private dataStorageService: DataStorageService,
    private loginService: LoginService,
    private utilsButtonService: UtilsButtonService,
    private router: Router) {}

  ngOnInit() {
    // Gestion del form
    this.loginForm = new FormGroup({
      'username': new FormControl(null, [Validators.required]),
      'password': new FormControl(null, [Validators.required])
    });

    // Me subscribo al dato para recuperar el servidor
    this.subscriptionRestServer = this.dataStorageService.restServer$.subscribe(
      (servidor: string) => {
        // Si KO --> muestro el error
        if (servidor === '-1') {
          this.translate.get('Comun.ErrorPeticion', {server: 'Recuperar servidor'}).subscribe(
            msg => {
              this.errorMessageDescripcion = msg;
            });
        // Si el servidor no es vacio que es el estado inicial.
        } else if (servidor !== '') {
          // Si OK --> Pongo en flag a true del servidor para habilitar el boton.
          this.isServidorRest = true;
        }
      }
    );
    // Escurcho el submit del boton
    this.submited$ = this.utilsButtonService.submitedButtonChanged;
    // Escuchamos los errores
    this.subscriptionLogin = this.loginService.errorMessageDescripcionChanged.subscribe((error: string) =>
      this.errorMessageDescripcion = error);
    if (this.dataStorageService.sesion !== undefined && (this.dataStorageService.sesion.status === this.constants.STATUS_ERROR ||
        this.dataStorageService.sesion.status === this.constants.STATUS_OK)) {
        this.errorMessageDescripcion = this.dataStorageService.sesion.errorMessageDescripcion;
    }
  }

  onToggleShow() {
    // Muestro el password
    this.showPassword = this.utilsButtonService.toggleShow(this.showPassword);
  }

  onSubmit() {
    // Inicializo los mensajes de error
    this.errorMessageDescripcion = '';
    // Deshabilito el boton
    this.utilsButtonService.submitedButtonChanged.next(true);
    // LLamo al servicio de login
    this.loginService.getLogin(this.loginForm.value.username, this.loginForm.value.password);
  }

  ngOnDestroy(): void {
    // Desuscribir
    this.subscriptionRestServer.unsubscribe();
    this.subscriptionLogin.unsubscribe();
  }
}
